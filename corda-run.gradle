buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "net.corda.plugins:cordformation:${corda_gradle_plugins_version}"
    }
}

def RUN_CORDA_GROUP = "corda"

task deployNodes(type: net.corda.plugins.Cordform, group: RUN_CORDA_GROUP) {
    dependsOn 'cordapp:jar'
    directory "$rootDir/build/nodes"

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10701
        rpcSettings {
            address("localhost:10702")
            adminAddress("localhost:10703")
        }
        cordapps = ["com.luxoft.poc.supplychain:cordapp:0.1"]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=Manufacture,L=London,C=GB"
        p2pPort 10001
        rpcSettings {
            address("localhost:10002")
            adminAddress("localhost:10003")
        }
        cordapps = ["com.luxoft.poc.supplychain:cordapp:0.1"]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=TreatmentCenter,L=London,C=GB"
        p2pPort 10101
        rpcSettings {
            address("localhost:10102")
            adminAddress("localhost:10103")
        }
        cordapps = ["com.luxoft.poc.supplychain:cordapp:0.1"]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=SovrinAgent,L=London,C=GB"
        p2pPort 10201
        rpcSettings {
            address("localhost:10202")
            adminAddress("localhost:10203")
        }
        cordapps = ["com.luxoft.poc.supplychain:cordapp:0.1"]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

}


deployNodes.initializeConfiguration()
def cordaNodes = deployNodes.nodes


configurations {
    /** Dependencies that must be deployed into running Corda nodes */
    cordappDeploy
}

task deployJarsToNodes(group: RUN_CORDA_GROUP) {
    doLast {
        def cordaDeployConfiguration = configurations.cordappDeploy
        def cordaDeployDependencies = cordaDeployConfiguration.resolvedConfiguration.firstLevelModuleDependencies
        def cordaDeployArtifacts = cordaDeployDependencies.collectMany { it.moduleArtifacts }
        def cordaDeployFiles = cordaDeployArtifacts*.file
        
        for(nodeDir in cordaNodes*.nodeDir) {
            copy {
                from cordaDeployFiles
                into "$nodeDir/cordapps"
            }
        }
    }
}

task deployCordappToNodes(group: RUN_CORDA_GROUP) {
    for(nodeDir in cordaNodes*.nodeDir) {
        copy {
            from('devops/Dockerfile-corda')
            into(nodeDir)
        }
    }
}

task deployConfigsToNodes(group: RUN_CORDA_GROUP) {
    def indyConfigMapping = ["TreatmentCenter": "treatment",
                             "SovrinAgent"    : "agent",
                             "Manufacture"    : "issuer"]

    indyConfigMapping.each { nodeName, configName ->
        def node = cordaNodes.find { it.nodeDir.name == nodeName }

        copy {
            from("config/test/indyconfig")
            into("${node.nodeDir}/indyconfig")
            include("${configName}.properties")
            rename("${configName}.properties", 'indy.properties')
        }
    }
}

task deployCordaNetwork(group: RUN_CORDA_GROUP) {
    dependsOn deployNodes
    dependsOn deployJarsToNodes
    dependsOn deployCordappToNodes
    dependsOn deployConfigsToNodes
}

/* DEPRECATED! Use `deployCordaNetwork` task */
task deployStuffToNodes(group: RUN_CORDA_GROUP) {
    dependsOn deployJarsToNodes
    dependsOn deployCordappToNodes
    dependsOn deployConfigsToNodes
}

task runNodes(type: Exec, group: RUN_CORDA_GROUP) {
    dependsOn deployCordaNetwork

    workingDir "$rootDir/build/nodes"
    executable "./runnodes"
}
